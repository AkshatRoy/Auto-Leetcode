# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverse(self, left: Optional[ListNode], step: int) -> None:
        dummy, curr = None, left
        next_node = None
        count = 0
        while curr:
            next_node = curr.next
            curr.next = dummy
            dummy = curr
            curr = next_node
            count += 1
            if count == step:
                break

    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        # find left and right nodes
        dummy = ListNode(-101, head)
        pref = None
        post = None
        left_node, right_node = head, head
        for _ in range(left-1):
            pref = left_node
            left_node = left_node.next
        for _ in range(right-1):
            right_node = right_node.next
        post = right_node.next

        # Reverse linked list (from left to right)
        self.reverse(left_node, right - left + 1)

        # after reversing, set next for pref and post
        if pref:
            pref.next = right_node
        else:
            dummy.next = right_node
        left_node.next = post

        return dummy.next    